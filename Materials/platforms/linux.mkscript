# This is "linux.mkscript", a script which defines build settings used in
# inweb, intest, inform and all of their subsidiary tools for the platform
# "linux", used for tools compiled for use in the Gnome app. The maintainer
# of this file is Philip Chimento.

# The script is used for two purposes. Firstly, it is used to generate the
# file "linux.mk" of platform settings. If an inweb user selects linux as
# platform on a first run, then this is the file copied into place as
# inweb/platform-settings.mk. But secondly, it also defines macros which
# can be used by any *.mkscript files being converted to *.mk files on
# this platform.

# Do not edit "linux.mk" directly. Instead, edit this script, and then
# rebuild "linux.mk" by setting the current working directory to the directory
# _above_ "inweb", and using the command:

# inweb/Tangled/inweb make-makefile inweb -script inweb/Materials/platforms/linux.mkscript -to inweb/Materials/platforms/linux.mk

# Or simply:

# make -f inweb/inweb.mk makers

# which recreates all of the make-files in the inweb repository from their
# scripts, including linux.mk among them.

# See the inweb manual for documentation on the *.mkscript file format, i.e.,
# the format in which this file is written. But it is essentially just a makefile
# with a number of special macro and loop features whose syntax involves braces
# { ... }, so anywhere that you see braces, you're looking at something special
# to *.mkscript; anything else is straightforward make syntax.

# -----------------------------------------------------------------------------

# The first definition in this file must set INWEBPLATFORM to the platform
# name, which is the same as the leafname of this file without the ".mkscript"
# file extension. So:

INWEBPLATFORM = linux

# The I6 source code has its own set of symbolic names for operating systems,
# not always the same as inweb's names for platforms, so:

INFORM6OS = LINUX

# On some platforms, executables have a specific file extension, which we define here:

EXEEXTENSION =

# -----------------------------------------------------------------------------

# These are likely to be the same on all platforms:

INTEST = intest/Tangled/intest
INWEB = inweb/Tangled/inweb

# -----------------------------------------------------------------------------

# Now three macro definitions: two for compiling C code to *.o object files
# (one being strict about warnings, the other indulgently suppressing them);
# and one for linking those *.o files into an executable.

{define: compile to: TO from: FROM ?options: OPTS}
	$(CC) -std=c11 -c $(MANYWARNINGS) $(CCOPTS) -g {OPTS} -o {TO} {FROM}
{end-define}

{define: compile-indulgently to: TO from: FROM ?options: OPTS}
	$(CC) -std=c99 -c $(FEWERWARNINGS) $(CCOPTS) -g {OPTS} -o {TO} {FROM}
{end-define}

{define: link to: TO from: FROM ?options: OPTS}
	$(CC) $(CCOPTS) -o {TO} {FROM} {OPTS} -lm -pthread $(LDFLAGS)
{end-define}

# Where:

# The core Inform tools are recommended to be compiled with Clang. To use GCC or
# your platform's default compiler, set or delete this variable accordingly.
CC = clang

# Source options (_POSIX_C_SOURCE is necessary for readlink()); color error
# messages; pull in optimization and debug flags from whatever is defined in the
# CFLAGS and LDFLAGS environment variables by the Linux packaging config.

CCOPTS = -D_POSIX_C_SOURCE=200112L -D_DEFAULT_SOURCE -DPLATFORM_LINUX \
	-fdiagnostics-color=auto $(CFLAGS)

MANYWARNINGS = -Wall -Wextra -Wno-unknown-warning-option \
    -Wno-declaration-after-statement -Wno-deprecated-non-prototype \
    -Wno-unused-but-set-variable -Wno-unused-parameter

# To explain those:

#     -Wno-unknown-warning-option: we want to turn off new warnings on later versions of clang but still compile on earlier versions
#     -Wno-declaration-after-statement: clang is very zealous about compatibility with C89 even though we are compiling in C99
#     -Wno-deprecated-non-prototype: avoids a warning in the plugin code where we pass arguments to a function pointer
#     -Wno-unused-but-set-variable: this is harmless, and done deliberately to avoid warnings on other compilers
#     -Wno-unused-parameter: we don't much care if a function argument isn't used

FEWERWARNINGS = -Wno-constant-conversion -Wno-dangling-else -Wno-format \
    -Wno-implicit-int -Wno-pointer-sign

# For GCC, here is an alternate set:
# MANYWARNINGS = -Wall -Wextra -Wimplicit-fallthrough=2 \
#     -Wno-pointer-to-int-cast -Wno-unknown-pragmas \
#     -Wno-unused-but-set-parameter -Wno-unused-but-set-variable \
#     -Wno-unused-function -Wno-unused-parameter -Wno-unused-variable
# FEWERWARNINGS = -Wno-implicit-int
